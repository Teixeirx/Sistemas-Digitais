# Trabalho 01 ‚Äì L√≥gica de Controle de Elevador

**UNIVERSIDADE FRANCISCANA** **Curso:** Ci√™ncia da Computa√ß√£o ‚Äì 2025-02.  
**Disciplina:** Sistemas Digitais.  
**Professor:** Andr√© Flores dos Santos.

---

- **Aluno:** Gabriel Teixeira
- **Data:** 27/08/2025

---

> ### **üéØ Objetivo**
> Projetar e implementar a l√≥gica de controle de um elevador utilizando apenas portas l√≥gicas, com base nas regras de opera√ß√£o fornecidas.

### **1. Tabela-Verdade**

A tabela-verdade completa, baseada nas regras de opera√ß√£o, √© a seguinte:

| D | U | L | UP | DOWN | Justificativa |
|---|---|---|:--:|:----:|---------------|
| 0 | 0 | 0 | 0  | 0    | [cite_start]Regra 1: Porta aberta, elevador parado[cite: 5]. |
| 0 | 0 | 1 | 0  | 0    | [cite_start]Regra 1: Porta aberta, elevador parado[cite: 6]. |
| 0 | 1 | 0 | 0  | 0    | [cite_start]Regra 1: Porta aberta, elevador parado[cite: 7]. |
| 0 | 1 | 1 | 0  | 0    | [cite_start]Regra 1: Porta aberta, elevador parado[cite: 8]. |
| 1 | 0 | 0 | 0  | 0    | [cite_start]Porta fechada, sem pedidos[cite: 9]. |
| 1 | 0 | 1 | 0  | 1    | [cite_start]Regra 3: Pedido para descer[cite: 10]. |
| 1 | 1 | 0 | 1  | 0    | [cite_start]Regra 2: Pedido para subir[cite: 11]. |
| 1 | 1 | 1 | 1  | 0    | [cite_start]Regra 4: Conflito, prioridade para subir[cite: 12]. |

### **2. Mintermos**

[cite_start]Os mintermos s√£o as combina√ß√µes de entrada para as quais cada sa√≠da √© ativada (resulta em 1)[cite: 12].

- **Para a sa√≠da `UP`:**
    - [cite_start]`D.U.L'` (linha 110, mintermo m6) [cite: 13]
    - [cite_start]`D.U.L` (linha 111, mintermo m7) [cite: 13]
- **Para a sa√≠da `DOWN`:**
    - [cite_start]`D.U'.L` (linha 101, mintermo m5) [cite: 13]

### **3. Equa√ß√£o Can√¥nica (Soma de Produtos - SOP)**

[cite_start]A equa√ß√£o can√¥nica para cada sa√≠da √© a soma de seus mintermos[cite: 13].

- [cite_start]**Equa√ß√£o para `UP`:** `UP = D.U.L' + D.U.L` [cite: 14]
- [cite_start]**Equa√ß√£o para `DOWN`:** `DOWN = D.U'.L` [cite: 14]

### **4. Simplifica√ß√£o (√Ålgebra Booleana)**

[cite_start]As equa√ß√µes can√¥nicas podem ser simplificadas para otimizar o circuito[cite: 14].

- **Simplifica√ß√£o de `UP`:**
    ```
    UP = D.U.L' + D.U.L
    UP = D.U . (L' + L)
    UP = D.U . (1)
    UP = D.U
    ```
- **Simplifica√ß√£o de `DOWN`:**
    - [cite_start]A equa√ß√£o `DOWN = D.U'.L` j√° est√° em sua forma m√≠nima[cite: 16].

### **5. Implementa√ß√£o no Logisim Evolution**

Descri√ß√£o do circuito final baseado nas equa√ß√µes simplificadas:

- **Entradas:**
    - [cite_start]Crie tr√™s pinos de entrada (Inputs) e rotule-os como `D`, `U` e `L`[cite: 18].

- **Sa√≠da `UP` (`UP = D.U`):**
    1.  [cite_start]Adicione uma porta **AND** de duas entradas[cite: 18].
    2.  [cite_start]Conecte a entrada `D` e a entrada `U` a esta porta AND[cite: 19].
    3.  [cite_start]Conecte a sa√≠da da porta AND a um pino de sa√≠da (Output) rotulado como `UP`[cite: 20].

- **Sa√≠da `DOWN` (`DOWN = D.U'.L`):**
    1.  [cite_start]Adicione uma porta **NOT**[cite: 21].
    2.  [cite_start]Conecte a entrada `U` √† porta NOT para obter o sinal `U'`[cite: 21].
    3.  [cite_start]Adicione uma porta **AND** de tr√™s entradas[cite: 22].
    4.  [cite_start]Conecte a entrada `D`, a sa√≠da da porta NOT (`U'`) e a entrada `L` a esta porta AND[cite: 22].
    5.  [cite_start]Conecte a sa√≠da da porta AND a um pino de sa√≠da (Output) rotulado como `DOWN`[cite: 23].

### **6. Registro de Testes**

[cite_start]Valida√ß√£o da l√≥gica do circuito com base nas equa√ß√µes simplificadas[cite: 24].

- **(i) Porta Aberta (D=0):**
    - `UP = 0 . [cite_start]U = 0` [cite: 24]
    - `DOWN = 0 . U' . [cite_start]L = 0` [cite: 25]
    - **Resultado:** Correto. [cite_start]Ambas as sa√≠das s√£o 0[cite: 26].

- **(ii) Pedido para Subir (D=1, U=1, L=0):**
    - `UP = 1 . [cite_start]1 = 1` [cite: 26]
    - `DOWN = 1 . (1)' . 0 = 1 . 0 . [cite_start]0 = 0` [cite: 27]
    - **Resultado:** Correto. [cite_start]`UP` √© 1 e `DOWN` √© 0[cite: 28].

- **(iii) Pedido para Descer (D=1, U=0, L=1):**
    - `UP = 1 . [cite_start]0 = 0` [cite: 28]
    - `DOWN = 1 . (0)' . 1 = 1 . 1 . [cite_start]1 = 1` [cite: 29]
    - **Resultado:** Correto. [cite_start]`UP` √© 0 e `DOWN` √© 1[cite: 30].

- **(iv) Conflito - Prioridade Subir (D=1, U=1, L=1):**
    - `UP = 1 . [cite_start]1 = 1` [cite: 30]
    - `DOWN = 1 . (1)' . 1 = 1 . 0 . [cite_start]1 = 0` [cite: 31]
    - **Resultado:** Correto. [cite_start]A prioridade √© mantida, com `UP=1` e `DOWN=0`[cite: 32].

### **7. Print do Circuito no Logisim**


